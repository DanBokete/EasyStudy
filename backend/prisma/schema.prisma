// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
  // previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(cuid())
  email        String         @unique
  name         String?
  password     String
  projects     Project[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Module       Module[]
  StudySession StudySession[]
}

enum ProjectStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

model Module {
  id           String         @id @default(cuid())
  name         String         @unique
  description  String?
  userId       String
  user         User           @relation(fields: [userId], references: [id])
  projects     Project[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  StudySession StudySession[]
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  tasks       Task[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  dueDate     DateTime?
  moduleId    String?
  module      Module?       @relation(fields: [moduleId], references: [id])
  status      ProjectStatus @default(PENDING)
  archivedAt  DateTime?
  archived    Boolean       @default(false)

  @@unique([id, userId])
}

model Task {
  id           String     @id @default(cuid())
  title        String
  description  String?
  projectId    String
  project      Project    @relation(fields: [projectId], references: [id])
  subtasks     Task[]     @relation("SubtaskRelation")
  parentTask   Task?      @relation("SubtaskRelation", fields: [parentTaskId], references: [id])
  parentTaskId String?
  status       TaskStatus @default(TODO)
  dueDate      DateTime?
  time         String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model StudySession {
  id          String    @id @default(cuid())
  activity    String?
  description String?
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  moduleId    String
  module      Module    @relation(fields: [moduleId], references: [id])
  startTime   DateTime  @default(now())
  endTime     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
